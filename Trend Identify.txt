// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0///@version=5indicator("Session Delta + Counters + Prev/Current Levels + VWAP (No if/else)", overlay=true, max_labels_count=500)// ==== Inputs ====deltaLength = input.int(20, "Smoothing Length")obLevel     = input.int(1000, "Overbought Level")osLevel     = input.int(-1000, "Oversold Level")// ==== Session Reset Logic ====newDay = ta.change(time("D"))// ==== Candle Delta ====candleDelta = close > open ? volume : close < open ? -volume : 0// ==== Session cumulative delta (reset daily) ====var float sessionDelta = 0.0sessionDelta := newDay ? candleDelta : sessionDelta + candleDelta// ==== Overbought/Oversold Signals ====obCond = sessionDelta > obLevelosCond = sessionDelta < osLevelplotshape(obCond, title="Delta Overbought", style=shape.triangledown,color=color.red, size=size.small, location=location.abovebar)plotshape(osCond, title="Delta Oversold", style=shape.triangleup,color=color.green, size=size.small, location=location.belowbar)          // ==== Display Session Delta ====var table deltaTable = table.new(position.bottom_right, 1, 1, border_width=1)if barstate.islast    table.cell(deltaTable, 0, 0, "Δ Session: " + str.tostring(sessionDelta, format.mintick),text_color=color.white, text_size=size.normal, bgcolor=color.black)                      // ==== Persistent Green/Red Candle Counters ====var int greenCount = 0var int redCount   = 0greenCount += close > open ? 1 : 0redCount   += close < open ? 1 : 0greenCount := newDay ? 0 : greenCountredCount   := newDay ? 0 : redCount                      // ==== Trend ====trend = greenCount > redCount ? "UP" : redCount > greenCount ? "DOWN" : "NEUTRAL"                      // ==== Display Counters ====var table countTable = table.new(position.bottom_left, 1, 3, border_width=1)if barstate.islast    table.cell(countTable, 0, 0, "Green Total: " + str.tostring(greenCount),text_color=color.lime, text_size=size.normal, bgcolor=color.black)    table.cell(countTable, 0, 1, "Red Total: " + str.tostring(redCount),text_color=color.red, text_size=size.normal, bgcolor=color.black)    table.cell(countTable, 0, 2, "Trend: " + trend,text_color=color.white, text_size=size.normal,bgcolor=(trend=="UP"?color.green:trend=="DOWN"?color.red:color.gray))                                                                  // ==== Previous Day Levels ====prevHigh  = request.security(syminfo.tickerid, "D", high[1], lookahead=barmerge.lookahead_on)prevLow   = request.security(syminfo.tickerid, "D", low[1], lookahead=barmerge.lookahead_on)prevClose = request.security(syminfo.tickerid, "D", close[1], lookahead=barmerge.lookahead_on)prevMid   = (prevHigh + prevLow) / 2.0plot(prevHigh,  "Prev High",  color=color.new(color.red,   0), linewidth=1)plot(prevLow,   "Prev Low",   color=color.new(color.green, 0), linewidth=1)plot(prevMid,   "Prev Mid",   color=color.new(color.blue,  0), linewidth=1)plot(prevClose, "Prev Close", color=color.new(color.yellow,0), linewidth=1)                                                                  // ==== Current Session High/Low/Mid ====//curHigh = ta.highest(newDay ? high : na, bar_index)//curLow  = ta.lowest(newDay ? low : na, bar_index)//curMid  = (curHigh + curLow) / 2.0//plot(curHigh, "Session High", color=color.fuchsia, linewidth=2)//plot(curLow,  "Session Low",  color=color.teal, linewidth=2)//plot(curMid,  "Session Mid",  color=color.aqua, linewidth=2)// ==== Current Session High/Low/Mid ====//sessBars = nz(ta.barssince(newDay), 0) + 1//curHigh  = ta.highest(high, sessBars)//curLow   = ta.lowest(low,  sessBars)//curMid   = (curHigh + curLow) / 2.0//plot(curHigh, "Session High", color=color.fuchsia, linewidth=2)//plot(curLow,  "Session Low",  color=color.teal, linewidth=2)//plot(curMid,  "Session Mid",  color=color.aqua, linewidth=2)   // ==== Current Session High/Low/Mid (safe, no highest/lowest window) ====var float curHigh = navar float curLow  = na      // assign using ternary so values reset on newDay and accumulate otherwisecurHigh := newDay ? high : math.max(nz(curHigh, high), high)curLow  := newDay ? low  : math.min(nz(curLow, low), low)   curMid  = (curHigh + curLow) / 2.0   plot(curHigh, "Session High", color=color.fuchsia, linewidth=2)plot(curLow,  "Session Low",  color=color.teal, linewidth=2)plot(curMid,  "Session Mid",  color=color.aqua, linewidth=2)                                                              // ==== Session VWAP ====var float vwapSumPV = navar float vwapSumV  = navwapSumPV := newDay ? (hlc3 * volume) : nz(vwapSumPV) + hlc3 * volumevwapSumV  := newDay ? volume : nz(vwapSumV) + volumesessionVWAP = vwapSumV > 0 ? vwapSumPV / vwapSumV : naplot(sessionVWAP, "Session VWAP", color=color.orange, linewidth=2)